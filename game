import random
import os

def initialize_board():
    board = [[0 for _ in range(4)] for _ in range(4)]
    add_new_tile(board)
    add_new_tile(board)
    return board

def print_board(board):
    os.system('cls' if os.name == 'nt' else 'clear')  # 清屏
    print("2048 游戏")
    for row in board:
        print("+----+----+----+----+")
        print("|", end="")
        for num in row:
            print(f"{num:4}|" if num != 0 else "    |", end="")
        print()
    print("+----+----+----+----+")
    print("使用 WASD 移动，Q 退出")

def transpose(board):
    return [list(row) for row in zip(*board)]

def merge(row):
    new_row = [num for num in row if num != 0]
    merged = []
    score = 0
    i = 0
    while i < len(new_row):
        if i + 1 < len(new_row) and new_row[i] == new_row[i+1]:
            merged_val = new_row[i] * 2
            merged.append(merged_val)
            score += merged_val
            i += 2
        else:
            merged.append(new_row[i])
            i += 1
    merged += [0] * (len(row) - len(merged))
    return merged, score

def move_left(board):
    new_board = []
    total_score = 0
    for row in board:
        merged_row, score = merge(row)
        new_board.append(merged_row)
        total_score += score
    return new_board, total_score

def move(board, direction):
    if direction == 'a':  # 左
        new_board, score = move_left(board)
    elif direction == 'd':  # 右
        reversed_board = [row[::-1] for row in board]
        new_board, score = move_left(reversed_board)
        new_board = [row[::-1] for row in new_board]
    elif direction == 'w':  # 上
        transposed = transpose(board)
        new_board, score = move_left(transposed)
        new_board = transpose(new_board)
    elif direction == 's':  # 下
        transposed = transpose(board)
        reversed_transposed = [row[::-1] for row in transposed]
        new_board, score = move_left(reversed_transposed)
        new_board = [row[::-1] for row in new_board]
        new_board = transpose(new_board)
    else:
        return board, 0
    return new_board, score

def add_new_tile(board):
    empty_cells = [(i, j) for i in range(4) for j in range(4) if board[i][j] == 0]
    if empty_cells:
        i, j = random.choice(empty_cells)
        board[i][j] = 2 if random.random() < 0.9 else 4
    return board

def is_game_over(board):
    if any(0 in row for row in board):
        return False
    for i in range(4):
        for j in range(3):
            if board[i][j] == board[i][j+1] or board[j][i] == board[j+1][i]:
                return False
    return True

def main():
    board = initialize_board()
    total_score = 0
    
    while True:
        print_board(board)
        print(f"当前分数: {total_score}")
        
        direction = input("输入方向（WASD）: ").lower()
        if direction == 'q':
            break
        
        if direction not in ['w', 'a', 's', 'd']:
            print("无效输入！使用 WASD 移动")
            continue
        
        new_board, score = move([row.copy() for row in board], direction)
        if new_board != board:
            total_score += score
            board = new_board
            add_new_tile(board)
            
            # 检查胜利条件
            if any(num >= 2048 for row in board for num in row):
                print_board(board)
                print("恭喜你达成2048！")
                if input("继续游戏？(y/n): ").lower() != 'y':
                    break
                
            if is_game_over(board):
                print_board(board)
                print("游戏结束！")
                break

if __name__ == "__main__":
    main()
